# -*- coding: utf-8 -*-
"""논문크롤링.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13XumoRXnHo1PmWTaBZaImSee4fPyh9tO
"""

!pip install biopython
from Bio import Entrez, Medline
import csv

# Entrez 이메일 설정 (필수)
Entrez.email = "jmleetpl@gmail.com"

# 검색어 설정
search_terms = "(laparoscopic hepatectomy[Title/Abstract]) AND open hepatectomy[Title/Abstract]"

# PubMed에서 검색
handle = Entrez.esearch(db="pubmed", term=search_terms)
record = Entrez.read(handle)

# 결과를 CSV 파일로 저장
with open('papers.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Title", "First Author", "Journal", "Year"])
    for id in record["IdList"]:
        handle = Entrez.efetch(db="pubmed", id=id, rettype="medline", retmode="text")
        records = Medline.parse(handle)
        for record in records:
            title = record.get('TI', '?')
            first_author = record.get('AU', ['?'])[0]
            journal = record.get('JT', '?')
            year = record.get('DP', '?').split(' ')[0]
            writer.writerow([title, first_author, journal, year])

from Bio import Entrez, Medline
import csv

# Entrez 이메일 설정 (필수)
Entrez.email = "jmleetpl@gmail.com"


# 검색어 설정
search_terms = "(laparoscopic hepatectomy[Title/Abstract]) AND open hepatectomy[Title/Abstract]"

# PubMed에서 검색
handle = Entrez.esearch(db="pubmed", term=search_terms)
record = Entrez.read(handle)

# 검색 결과 확인
if "IdList" in record:
    # 결과를 CSV 파일로 저장
    with open('papers.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Title", "First Author", "Journal", "Year"])
        for id in record["IdList"]:
            handle = Entrez.efetch(db="pubmed", id=id, rettype="medline", retmode="text")
            records = Medline.parse(handle)
            for record in records:
                title = record.get('TI', '?')
                first_author = record.get('AU', ['?'])[0]
                journal = record.get('JT', '?')
                year = record.get('DP', '?').split(' ')[0]
                writer.writerow([title, first_author, journal, year])

    # 결과를 텍스트 파일로 저장
    with open('papers.txt', 'w') as file:
        for id in record["IdList"]:
            handle = Entrez.efetch(db="pubmed", id=id, rettype="medline", retmode="text")
            records = Medline.parse(handle)
            for record in records:
                title = record.get('TI', '?')
                abstract = record.get('AB', '?')
                file.write(f"Title: {title}\nAbstract: {abstract}\n\n")
else:
    print("No papers found")

!pip install biopython pandas
import pandas as pd
from Bio import Entrez

def search(query):
    Entrez.email = 'jmleetpl@gmail.com'
    handle = Entrez.esearch(db='pubmed',
                            sort='relevance',
                            retmax='100',
                            retmode='xml',
                            term=query)
    results = Entrez.read(handle)
    return results

def fetch_details(id_list):
    ids = ','.join(id_list)
    Entrez.email = 'jmleetpl@gmail.com'
    handle = Entrez.efetch(db='pubmed',
                           retmode='xml',
                           id=ids)
    results = Entrez.read(handle)
    return results

def create_df(results):
    paper_list = []
    for paper in results['PubmedArticle']:
        title = paper['MedlineCitation']['Article']['ArticleTitle']
        year = paper['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year']
        journal = paper['MedlineCitation']['Article']['Journal']['Title']
        first_author = paper['MedlineCitation']['Article']['AuthorList'][0]['LastName'] + " " + paper['MedlineCitation']['Article']['AuthorList'][0]['ForeName']
        abstract = paper['MedlineCitation']['Article']['Abstract']['AbstractText'][0]
        paper_list.append([title, year, journal, first_author, abstract])
    df = pd.DataFrame(paper_list, columns=['Title', 'Year', 'Journal', 'First Author', 'Abstract'])
    return df

if __name__ == '__main__':
    results = search('laparoscopic hepatectomy VS open hepatectomy')
    id_list = results['IdList']
    papers = fetch_details(id_list)
    df = create_df(papers)
    df.to_csv('papers3.csv')

import pandas as pd
from Bio import Entrez

def search(query):
    Entrez.email = 'jmleetpl@gmail.com'
    handle = Entrez.esearch(db='pubmed',
                            sort='relevance',
                            retmax='100',
                            retmode='xml',
                            term=query)
    results = Entrez.read(handle)
    return results

def fetch_details(id_list):
    ids = ','.join(id_list)
    Entrez.email = 'jmleetpl@gmail.com'
    handle = Entrez.efetch(db='pubmed',
                           retmode='xml',
                           id=ids)
    results = Entrez.read(handle)
    return results

def create_df(results):
    paper_list = []
    for paper in results['PubmedArticle']:
        title = paper['MedlineCitation']['Article']['ArticleTitle']
        year = paper['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year']
        journal = paper['MedlineCitation']['Article']['Journal']['Title']
        first_author = paper['MedlineCitation']['Article']['AuthorList'][0]['LastName'] + " " + paper['MedlineCitation']['Article']['AuthorList'][0]['ForeName']

        # Check if the paper has an abstract
        if 'Abstract' in paper['MedlineCitation']['Article']:
            abstract = paper['MedlineCitation']['Article']['Abstract']['AbstractText'][0]
        else:
            abstract = "No abstract available"

        paper_list.append([title, year, journal, first_author, abstract])

    df = pd.DataFrame(paper_list, columns=['Title', 'Year', 'Journal', 'First Author', 'Abstract'])
    return df

if __name__ == '__main__':
    results = search('laparoscopic hepatectomy VS open hepatectomy')
    id_list = results['IdList']
    papers = fetch_details(id_list)
    df = create_df(papers)
    df.to_csv('papers3.csv')